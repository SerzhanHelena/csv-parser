{"version":3,"file":"validateFunctionstest.js","sourceRoot":"","sources":["../../test/validateFunctionstest.ts"],"names":[],"mappings":"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","sourcesContent":["// @ts-ignore\nimport { expect } from \"chai\";\nimport {ValidateExtentions} from \"../classes/validateFunctions\";\nimport {time} from \"../classes/time\";\nimport {config} from \"../assets/config\";\n\n\n// @ts-ignore\ndescribe('ValidateExtentions', ()=> {\n    // @ts-ignore\n    describe('validateLength', ()=>{\n        let res:string = ValidateExtentions.validateLength(2, 6, 'qwe', 'name');\n        // @ts-ignore\n        it('should return NUll', function () {\n            expect(null).to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateLengthError', ()=>{\n        let res:string = ValidateExtentions.validateLength(2, 6, 'qqweqwwe', 'name');\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect(\"Ошибка в поле name. Длина поля не входит в диапазон (2-6)\").to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateRange', ()=>{\n        let res:string = ValidateExtentions.validateRange(10, 1,100, 'name');\n        // @ts-ignore\n        it('should return NUll', function () {\n            expect(null).to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateRangeError', ()=>{\n        let res:string = ValidateExtentions.validateRange(10, 1,8, 'name');\n        // @ts-ignore\n        it('should return Error', function () {\n            expect(\"Ошибка в поле name. Значение поля не входит в диапазон (1-8)\").to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateRegexExpression', ()=>{\n        let res:string = ValidateExtentions.validateRegexExpression('\\\\+375 (29|25|44|33) \\\\d{7}', '+375 25 5565632', 'phone');\n        // @ts-ignore\n        it('should return NUll', function () {\n            expect(null).to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateRegexExpressionError', ()=>{\n        let res:string = ValidateExtentions.validateRegexExpression('\\\\+375 (29|25|44|33) \\\\d{7}', '+385 25 5565632', 'phone');\n        // @ts-ignore\n        it('should return Errrr', function () {\n            expect(\"Ошибка в поле phone. Значение поля +385 25 5565632 не соответствует заданному формату: +375 29/44/25/33 *******\").to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateLengthOFDate', ()=>{\n        let res:string = ValidateExtentions.validateLengthOFDate(1,10, '12345678', 'any' );\n        // @ts-ignore\n        it('should return NUll', function () {\n            expect(null).to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateLengthOFDateError', ()=>{\n        let res:string = ValidateExtentions.validateLengthOFDate(1,10, '1234561111111178', 'any' );\n        // @ts-ignore\n        it('should return NUll', function () {\n            expect(\"Ошибка в поле any. Длина поля не входит в диапазон (1 - 10)\").to.equal(res);        });    });\n    // @ts-ignore\n    describe('validateCurrentDate', ()=>{\n        let res:string = ValidateExtentions.validateCurrentDate('05-03-1995', 'date');\n        // @ts-ignore\n        it('should null', function () {\n            expect(null).to.equal(res);     });\n    });\n        // @ts-ignore\n    describe('validateCurrentDateError', ()=>{\n        let res:string = ValidateExtentions.validateCurrentDate('05-50-1995', 'date');\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect(\"Ошибка в поле date. Неверный формат даты\").to.equal(res);\n        });\n    });\n    // @ts-ignore\n    describe('validateEmail', ()=>{\n        let res:string = ValidateExtentions.validateEmail('qwe@qwe.qwe', 'mail');\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect(null).to.equal(res);\n        });\n    });\n    // @ts-ignore\n    describe('validateEmailEerror', ()=>{\n        let res:string = ValidateExtentions.validateEmail('qweqwe.qwe', 'mail');\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect(\"Ошибка в поле mail. Поле не соответствует формату\").to.equal(res);\n        });\n    });\n    // @ts-ignore\n    describe('TimeValidation', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('10:00 PM', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect('22:00').to.equal(res.value);\n        });\n    });\n    // @ts-ignore\n    describe('TimeValidationAM', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('10:00 AM', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect('10:00').to.equal(res.value);\n        });\n    });\n    // @ts-ignore\n    describe('TimeValidation', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('10:00', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect('10:00').to.equal(res.value);\n        });\n    });\n    // @ts-ignore\n    describe('TimeValidationInvalid', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('10:90 AM', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect(false).to.equal(res.valid);\n        });\n    });\n// @ts-ignore\n    describe('TimeValidationvalid', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('10:50 AM', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect(true).to.equal(res.valid);\n        });\n    });\n// @ts-ignore\n    describe('TimeValidationvalidHour', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('30:50 AM', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect('Неправилное значение часов').to.equal(res.error);\n        });\n    });\n    // @ts-ignore\n    describe('TimeValidationvalidMinutes', ()=>{\n        let conf = config.csv.find(obj => obj.name === 'time');\n        let res:time = new time('10:80 AM', conf);\n        // @ts-ignore\n        it('should Ошибка', function () {\n            expect('Неправилное значение минут').to.equal(res.error);\n        });\n    });\n\n});"]}