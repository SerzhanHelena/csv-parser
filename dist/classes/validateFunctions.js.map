{"version":3,"file":"validateFunctions.js","sourceRoot":"","sources":["../../classes/validateFunctions.ts"],"names":[],"mappings":"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","sourcesContent":[" // @ts-ignore\n const moment = require('moment');\n\nexport class ValidateExtentions {\n\n    public static validateLength(min:number, max:number, value:String, fieldName:string): string {\n        if (value.length < min || value.length > max) {\n            return \"Ошибка в поле \" + fieldName + \". Длина поля не входит в диапазон (\" + min.toString() +  \"-\" + max.toString() + \")\";\n        }\n        else return null;\n    }\n\n   public static validateRegexExpression(expression: string, value: string, fieldName: string) :string {\n        let regexp = new RegExp(expression, 'g');\n        // @ts-ignore\n        let res = value.match(regexp);\n        let length = value.length;\n        if ((res == null\n             ||length != res.length) && fieldName!='phone') {\n            return \"Ошибка в поле \" + fieldName + \". Значение поля '\"+value+\"' не соответствует заданному формату: \" + expression;\n        }\n        else if ((res==null || res[0].length!=length) && fieldName=='phone') {\n            return \"Ошибка в поле \" + fieldName + \". Значение поля '\"+value+\"' не соответствует заданному формату: +375 29/44/25/33 *******\" ;\n        }\n        return null;\n    }\n\n    public static validateRange(value: number, min: number, max: number, fieldName: string) {\n        if(value < min || value > max) {\n            return \"Ошибка в поле \" + fieldName + \". Значение поля не входит в диапазон (\" + min.toString() + \"-\" + max.toString() + \")\";\n        }\n        return null;\n    }\n\n     public static validateLengthOFDate(min:number, max:number, value:String, fieldName:string): string {\n         if (value.length < min || value.length-2 > max) {\n             return \"Ошибка в поле \" + fieldName + \". Длина поля не входит в диапазон (\" + min.toString() + \" - \" + max.toString() + \")\";\n         }\n         else return null;\n     }\n\n     public static validateCurrentDate (value: string, fieldName: string) {\n         let today = new Date();\n         let dd = today.getDate();\n         let mm = today.getMonth()+1; //January is 0!\n         let yyyy = today.getFullYear();\n\n         value = value.replace('/','.').replace('-', '.');\n         // @ts-ignore\n         let valueDate = moment(value, \"DD.MM.YYYY\");\n         if (!valueDate.isValid()) {\n             return 'Ошибка в поле ' + fieldName + \". Неверный формат даты\";\n         }\n\n         if (valueDate > today){\n             return 'Ошибка в поле ' + fieldName + \". Значение поля '\" + value + \"' не может быть больше сегодняшней даты \" + today;\n         }\n         return null;\n     }\n\n     public static validateEmail(value: string, fieldName: string): string {\n         if (value.indexOf(\"@\") == -1 || value.indexOf(\".\") == -1) {\n             return \"Ошибка в поле \" + fieldName + \". Поле не соответствует формату\";\n         }\n             return null;\n     }\n\n\n}"]}